Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# Create the Form
$form = New-Object System.Windows.Forms.Form
$form.Text = "Live Accurate Bandwidth Monitor (Sent/Received)"
$form.Size = New-Object System.Drawing.Size(550, 400)
$form.StartPosition = "CenterScreen"

# Create dropdown
$comboBox = New-Object System.Windows.Forms.ComboBox
$comboBox.Location = New-Object System.Drawing.Point(50,30)
$comboBox.Size = New-Object System.Drawing.Size(430,30)
$comboBox.DropDownStyle = 'DropDownList'

# Populate processes
Get-Process | Sort-Object ProcessName | ForEach-Object {
    if ($_.ProcessName -and !$comboBox.Items.Contains($_.ProcessName)) {
        $comboBox.Items.Add($_.ProcessName)
    }
}

# Start button
$startButton = New-Object System.Windows.Forms.Button
$startButton.Location = New-Object System.Drawing.Point(50,80)
$startButton.Size = New-Object System.Drawing.Size(180,30)
$startButton.Text = "Start Monitoring"

# Stop button
$stopButton = New-Object System.Windows.Forms.Button
$stopButton.Location = New-Object System.Drawing.Point(300,80)
$stopButton.Size = New-Object System.Drawing.Size(180,30)
$stopButton.Text = "Stop Monitoring"
$stopButton.Enabled = $false

# Label
$label = New-Object System.Windows.Forms.Label
$label.Location = New-Object System.Drawing.Point(50, 130)
$label.Size = New-Object System.Drawing.Size(450, 200)
$label.Text = ""

# Log File
$logFile = "$env:USERPROFILE\live_process_bandwidth_sent_received_log.txt"

# Timer
$timer = New-Object System.Windows.Forms.Timer
$timer.Interval = 2000

# Monitoring code
$timer.Add_Tick({
    if ($comboBox.SelectedItem) {
        try {
            $processName = $comboBox.SelectedItem

            # Get all instances
            $instances = (Get-Counter -ListSet "Process").CounterSetInstances

            # Match instance
            $matchingInstance = $instances | Where-Object { $_ -match "^$processName(\#\d+)?$" } | Select-Object -First 1

            if ($matchingInstance) {
                $counters = Get-Counter -Counter "\Process($matchingInstance)\IO Read Bytes/sec","\Process($matchingInstance)\IO Write Bytes/sec" -ErrorAction SilentlyContinue

                if ($counters.CounterSamples.Count -gt 0) {
                    $readBytes = $counters.CounterSamples | Where-Object { $_.Path -like "*IO Read Bytes/sec*" } | Select-Object -ExpandProperty CookedValue
                    $writeBytes = $counters.CounterSamples | Where-Object { $_.Path -like "*IO Write Bytes/sec*" } | Select-Object -ExpandProperty CookedValue

                    $receivedMBps = [math]::Round($readBytes/1MB, 4)
                    $sentMBps = [math]::Round($writeBytes/1MB, 4)
                    $totalMBps = [math]::Round(($readBytes + $writeBytes)/1MB, 4)

                    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                    $output = @"
[$timestamp]
Process: $processName ($matchingInstance)
Received (approx): $receivedMBps MB/sec
Sent (approx): $sentMBps MB/sec
Total IO: $totalMBps MB/sec
"@

                    $label.Text = $output

                    # Log
                    "$output`n" | Out-File -Append -FilePath $logFile
                }
                else {
                    $label.Text = "No data for selected process."
                }
            }
            else {
                $label.Text = "Matching instance not found."
            }
        }
        catch {
            $label.Text = "Error accessing performance counters."
        }
    }
})

# Start Monitoring
$startButton.Add_Click({
    if ($comboBox.SelectedItem) {
        $timer.Start()
        $startButton.Enabled = $false
        $stopButton.Enabled = $true
    } else {
        [System.Windows.Forms.MessageBox]::Show("Please select a process first.")
    }
})

# Stop Monitoring
$stopButton.Add_Click({
    $timer.Stop()
    $startButton.Enabled = $true
    $stopButton.Enabled = $false
})

# Add controls
$form.Controls.Add($comboBox)
$form.Controls.Add($startButton)
$form.Controls.Add($stopButton)
$form.Controls.Add($label)

# Show Form
[void]$form.ShowDialog()
